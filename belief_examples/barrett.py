import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--interactive", action="store_true")
args = parser.parse_args()

import trajoptpy
import openravepy as rave
import numpy as np
import json
import trajoptpy.math_utils as mu
import trajoptpy.kin_utils as ku
import trajoptpy.make_kinbodies as mk

def move_arm_to_grasp(xyz_targ, quat_targ, link_name, manip_name):
    
    request = {
        "basic_info" : {
            "n_steps" : 27,
            "manip" : manip_name,
            "start_fixed" : True,
            "belief_space" : True
        },
        "costs" : [
#        {
#            "type" : "continuous_collision",
#            "params" : {"coeffs" : [10],"dist_pen" : [0.02]}
#        },
        {
            "type" : "collision",
            "params" : {"coeffs" : [1],"dist_pen" : [0.025], "belief_space" : True}
        },
#        {
#            "type" : "joint_vel",
#            "params": {"coeffs" : [1]}
#        },
        {
            "type" : "control",
            "params": {"coeffs" : [0.1]}
        },
        {
            "type" : "covariance",
            "params": {
                "Q" : (np.eye(7)*10).tolist()
            }
        },
        ],
        "constraints" : [
        {
            "type" : "pose",
            "name" : "final_pose",
            "params" : {
                "pos_coeffs" : [1,1,1],
                "rot_coeffs" : [1,1,1],
                "xyz" : list(xyz_targ),
                "wxyz" : list(quat_targ),
                "link" : link_name,
            },
        },
#        {
#            "type" : "collision",
#            "params" : {"coeffs" : [1],"dist_pen" : [0], "belief_space" : True}
#        },
        {
            "type" : "control",
            "params": {
                "u_min" : -.3,
                "u_max" : .3
            }
        },
        ],
        "init_info" : {
            "type" : "stationary",
            "initial_rt_sigma" : (np.eye(7)*0.22).tolist()
        }
    }
    
    # load RRT trajectory (it's somehow missing some waypoints)
    request["init_info"]["type"] = "given_traj"
    path_init = np.load("../data/barrett_traj3.npy")
    request["init_info"]["data"] = [x.tolist() for x in path_init]
    
    return request


if __name__ == "__main__":
        
    ### Parameters ###
    ENV_FILE = "../data/barrett.env.xml"
    MANIP_NAME = "arm"
    LINK_NAME = "wam7"
    ##################
    
    ### Env setup ####
    env = rave.RaveGetEnvironment(1)
    if env is None:
        env = rave.Environment()
        env.StopSimulation()
        env.Load(ENV_FILE)
    
    robot = env.GetRobots()[0]
    # close fingers
    robot.SetDOFValues([1.3,1.3,1.3,0.5],[7,8,9,10])
    viewer = trajoptpy.GetViewer(env)
    viewer.SetCameraTransformation([0,0,4], [0,0,0], [0,1,0])

    manip = robot.SetActiveManipulator(MANIP_NAME)
    #robot.SetActiveDOFs(manip.GetArmIndices())
    robot.SetActiveDOFs([0,1,2,3,4,5,6])
    
    ikmodel=rave.databases.inversekinematics.InverseKinematicsModel(robot,iktype=rave.IkParameterization.Type.Transform6D)
    if not ikmodel.load():
        ikmodel.autogenerate()
        print('IKModel autogenerated')

    #qarray = rave.misc.SpaceSamplerExtra().sampleSO3()
    Tstart = np.array([[0,0,1,0.6],[0,1,0,-0.4],[-1,0,0,0.6],[0,0,0,1]])
    #Tstart[:3,:3] = rotationMatrixFromQuat(qarray[i]);
    sol = manip.FindIKSolution(Tstart, rave.IkFilterOptions.CheckEnvCollisions)
    print(sol)

    if sol is not None:
        robot.SetDOFValues(sol,[0,1,2,3,4,5,6])
	Tee = manip.GetEndEffectorTransform()
	print(Tee)

	#robot.WaitForController(0) # wait
	#raw_input('Hit ENTER to continue.')	

    ##################
    #T_gripper = robot.GetLink(LINK_NAME).GetTransform()
    #T_grasp = T_gripper.copy()
    #T_grasp[:3,3]  += np.array([-0.5,0.2,0])
    #T_grasp = T_grasp.dot(rave.matrixFromAxisAngle([0,0,1],np.pi/2))
    #xyz_targ = T_grasp[:3,3]
    #success = mk.create_cylinder(env, xyz_targ-np.array([.03,0,0]), .02, .5)
    #quat_targ = rave.quatFromRotationMatrix(T_grasp[:3,:3])
    #success = mk.create_cylinder(env, T_gripper[:3,3]-np.array([.1,-.1,0]), .02, .5)

    Tgoal = np.array([[0,0,1,0.6],[0,1,0,0.4],[-1,0,0,0.6],[0,0,0,1]])
    xyz_targ = Tgoal[:3,3]
    quat_targ = rave.quatFromRotationMatrix(Tgoal[:3,:3])

    request = move_arm_to_grasp(xyz_targ, quat_targ, LINK_NAME, MANIP_NAME)

    path_init = np.load("../data/barrett_traj3.npy")
    robot.SetActiveDOFValues(path_init[0,:])

    s = json.dumps(request)
    print "REQUEST:",s
    trajoptpy.SetInteractive(args.interactive) 
    prob = trajoptpy.ConstructProblem(s, env)
    result = trajoptpy.OptimizeProblem(prob)
    
    #stat = trajoptpy.SimulateAndReplan(s, env, 4)
    
#    stats = np.zeros((8,100))
#    for i in xrange(100):
#        print "sigma scale ", 4
#        stat = trajoptpy.SimulateAndReplan(s, env, 4)
#        stats[:,i] = stat[:,0]
    
